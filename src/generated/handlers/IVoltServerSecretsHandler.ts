/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
// tslint:disable:max-line-length

import * as coreHttp from "@azure/core-http";
import * as Models from "../artifacts/models";
import Context from "../Context";

export default interface IVoltServerSecretsHandler {
  setSecret(
    secretName: string,
    value: string,
    options: Models.VoltServerSecretsSetSecretOptionalParams,
    context: Context,
  ): Promise<Models.SetSecretResponse>;
  updateSecretLatestVersion(
    secretName: string,
    options: Models.VoltServerSecretsUpdateSecretLatestVersionOptionalParams,
    context: Context,
  ): Promise<Models.UpdateSecretLatestVersionResponse>;
  deleteSecret(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.DeleteSecretResponse>;
  getSecretLatestVersion(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.GetSecretLatestVersionResponse>;
  updateSecret(
    secretName: string,
    secretVersion: string,
    options: Models.VoltServerSecretsUpdateSecretOptionalParams,
    context: Context,
  ): Promise<Models.UpdateSecretResponse>;
  getSecret(
    secretName: string,
    secretVersion: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.GetSecretResponse>;
  getSecrets(
    options: Models.VoltServerSecretsGetSecretsOptionalParams,
    context: Context,
  ): Promise<Models.GetSecretsResponse>;
  getSecretVersions(
    secretName: string,
    options: Models.VoltServerSecretsGetSecretVersionsOptionalParams,
    context: Context,
  ): Promise<Models.GetSecretVersionsResponse>;
  getDeletedSecrets(
    options: Models.VoltServerSecretsGetDeletedSecretsOptionalParams,
    context: Context,
  ): Promise<Models.GetDeletedSecretsResponse>;
  getDeletedSecret(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.GetDeletedSecretResponse>;
  purgeDeletedSecret(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<coreHttp.RestResponse>;
  recoverDeletedSecret(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.RecoverDeletedSecretResponse>;
  backupSecret(
    secretName: string,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.BackupSecretResponse>;
  restoreSecret(
    secretBundleBackup: Uint8Array,
    options: coreHttp.RequestOptionsBase,
    context: Context,
  ): Promise<Models.RestoreSecretResponse>;
}
